/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Live typed full-stack
 * API documentation for Fastify
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  CreateUser201,
  DeleteUser204,
  EditUser201,
  GetUser200,
  GetUsers200Item
} from '../api.schemas'

export const getCreateUserResponseMock = (overrideResponse: Partial< CreateUser201 > = {}): CreateUser201 => ({age: faker.number.int({min: undefined, max: undefined}), email: faker.internet.email(), id: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getGetUsersResponseMock = (): GetUsers200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({age: faker.number.int({min: undefined, max: undefined}), email: faker.internet.email(), id: faker.string.alpha(20), name: faker.string.alpha(20)})))

export const getGetUserResponseMock = (overrideResponse: Partial< GetUser200 > = {}): GetUser200 => ({age: faker.number.int({min: undefined, max: undefined}), email: faker.internet.email(), id: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getEditUserResponseMock = (): EditUser201 => (faker.helpers.arrayElement([faker.helpers.arrayElement(['null'] as const), null]))

export const getDeleteUserResponseMock = (): DeleteUser204 => (faker.helpers.arrayElement([faker.helpers.arrayElement(['null'] as const), null]))


export const getCreateUserMockHandler = (overrideResponse?: CreateUser201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateUser201> | CreateUser201)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateUserResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetUsersMockHandler = (overrideResponse?: GetUsers200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsers200Item[]> | GetUsers200Item[])) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetUserMockHandler = (overrideResponse?: GetUser200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUser200> | GetUser200)) => {
  return http.get('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEditUserMockHandler = (overrideResponse?: EditUser201 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<EditUser201> | EditUser201)) => {
  return http.put('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEditUserResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: DeleteUser204 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteUser204> | DeleteUser204)) => {
  return http.delete('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteUserResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUsersMock = () => [
  getCreateUserMockHandler(),
  getGetUsersMockHandler(),
  getGetUserMockHandler(),
  getEditUserMockHandler(),
  getDeleteUserMockHandler()
]
